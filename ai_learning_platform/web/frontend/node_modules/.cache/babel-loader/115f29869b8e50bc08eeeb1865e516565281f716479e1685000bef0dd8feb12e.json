{"ast":null,"code":"var _jsxFileName = \"/Users/davidortiz/Projects/Fixed_AI_Learning/ai_learning_platform/web/frontend/src/components/testing/TestInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Box, Button, Card, CardContent, CircularProgress, Divider, FormControl, FormControlLabel, Grid, IconButton, InputLabel, MenuItem, Paper, Radio, RadioGroup, Select, TextField, Typography } from '@mui/material';\nimport { ContentCopy as CopyIcon } from '@mui/icons-material';\nimport { getPromptById, getPrompts, getModels, createTestResult } from '../../services/api';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestInterface = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    currentUser\n  } = useAuth();\n  const queryParams = new URLSearchParams(location.search);\n  const promptIdFromUrl = queryParams.get('promptId');\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [prompts, setPrompts] = useState([]);\n  const [models, setModels] = useState([]);\n  const [selectedPrompt, setSelectedPrompt] = useState(null);\n  const [selectedPromptId, setSelectedPromptId] = useState(promptIdFromUrl || '');\n  const [selectedModel, setSelectedModel] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [successScore, setSuccessScore] = useState(0.5);\n  const [notes, setNotes] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch prompts\n        const promptsData = await getPrompts({\n          limit: 100\n        });\n        setPrompts(promptsData);\n\n        // Fetch models\n        const modelsData = await getModels();\n        setModels(modelsData);\n\n        // If promptId is provided in URL, load that prompt\n        if (promptIdFromUrl) {\n          const promptData = await getPromptById(promptIdFromUrl);\n          setSelectedPrompt(promptData);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to load data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [promptIdFromUrl]);\n  const handlePromptChange = async event => {\n    const promptId = event.target.value;\n    setSelectedPromptId(promptId);\n    setError('');\n    if (!promptId) {\n      setSelectedPrompt(null);\n      return;\n    }\n    try {\n      setLoading(true);\n      const promptData = await getPromptById(promptId);\n      setSelectedPrompt(promptData);\n    } catch (error) {\n      console.error('Error fetching prompt:', error);\n      setError('Failed to load prompt. Please try again.');\n      setSelectedPrompt(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleModelChange = event => {\n    setSelectedModel(event.target.value);\n  };\n  const handleCopyPrompt = () => {\n    if (!selectedPrompt) return;\n    navigator.clipboard.writeText(selectedPrompt.prompt_text).then(() => {\n      alert('Prompt copied to clipboard!');\n    }).catch(err => {\n      console.error('Failed to copy prompt:', err);\n      alert('Failed to copy prompt. Please try again.');\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedPromptId) {\n      setError('Please select a prompt');\n      return;\n    }\n    if (!selectedModel) {\n      setError('Please select an AI model');\n      return;\n    }\n    if (!aiResponse) {\n      setError('Please enter the AI response');\n      return;\n    }\n    try {\n      setSubmitting(true);\n      setError('');\n      const resultData = {\n        prompt_id: selectedPromptId,\n        model_name: selectedModel,\n        model_provider: 'gray_swan_agent',\n        response: aiResponse,\n        success: success,\n        success_score: parseFloat(successScore),\n        notes: notes,\n        category: selectedPrompt === null || selectedPrompt === void 0 ? void 0 : selectedPrompt.category,\n        challenge_id: selectedPrompt === null || selectedPrompt === void 0 ? void 0 : selectedPrompt.challenge_id\n      };\n      await createTestResult(resultData);\n\n      // Reset form\n      setAiResponse('');\n      setSuccess(false);\n      setSuccessScore(0.5);\n      setNotes('');\n\n      // Navigate to results page\n      navigate('/results');\n    } catch (error) {\n      console.error('Error submitting test result:', error);\n      setError('Failed to submit test result. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      gutterBottom: true,\n      children: \"Manual Testing Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Step 1: Select a Prompt and Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            error: !selectedPromptId && !!error,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"prompt-select-label\",\n              children: \"Select Prompt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"prompt-select-label\",\n              id: \"prompt-select\",\n              value: selectedPromptId,\n              label: \"Select Prompt\",\n              onChange: handlePromptChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"Select a prompt\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this), prompts.map(prompt => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: prompt.id,\n                children: [prompt.category, \" - \", prompt.technique || 'N/A', \" - \", prompt.prompt_text.substring(0, 50), \"...\"]\n              }, prompt.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            error: !selectedModel && !!error,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"model-select-label\",\n              children: \"Select AI Model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"model-select-label\",\n              id: \"model-select\",\n              value: selectedModel,\n              label: \"Select AI Model\",\n              onChange: handleModelChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"Select an AI model\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), models.map(model => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: model,\n                children: model\n              }, model, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), selectedPrompt && /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Step 2: Copy and Test the Prompt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          startIcon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 26\n          }, this),\n          onClick: handleCopyPrompt,\n          children: \"Copy Prompt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 3,\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            color: \"text.secondary\",\n            gutterBottom: true,\n            children: [\"Category: \", selectedPrompt.category, selectedPrompt.technique && ` | Technique: ${selectedPrompt.technique}`, selectedPrompt.challenge_id && ` | Challenge: ${selectedPrompt.challenge_id}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"pre\",\n            className: \"prompt-text\",\n            sx: {\n              whiteSpace: 'pre-wrap',\n              fontFamily: 'monospace'\n            },\n            children: selectedPrompt.prompt_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mb: 2\n        },\n        children: [\"1. Copy the prompt above 2. Paste it to the AI model (\", selectedModel || \"selected model\", \") 3. Get the response 4. Paste the response below\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Step 3: Record the Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"AI Response\",\n          multiline: true,\n          rows: 8,\n          fullWidth: true,\n          value: aiResponse,\n          onChange: e => setAiResponse(e.target.value),\n          placeholder: \"Paste the AI's response here...\",\n          sx: {\n            mb: 3\n          },\n          error: !aiResponse && !!error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              component: \"fieldset\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Was the test successful?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n                row: true,\n                value: success,\n                onChange: e => setSuccess(e.target.value === 'true'),\n                children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: true,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 59\n                  }, this),\n                  label: \"Success\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: false,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 60\n                  }, this),\n                  label: \"Failure\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Success Score (0-1)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                type: \"number\",\n                value: successScore,\n                onChange: e => setSuccessScore(e.target.value),\n                inputProps: {\n                  min: 0,\n                  max: 1,\n                  step: 0.1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Notes\",\n              multiline: true,\n              rows: 5,\n              fullWidth: true,\n              value: notes,\n              onChange: e => setNotes(e.target.value),\n              placeholder: \"Add any notes or observations about the test...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          sx: {\n            mt: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            display: 'flex',\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            size: \"large\",\n            disabled: submitting || !selectedPromptId || !selectedModel || !aiResponse,\n            children: submitting ? 'Submitting...' : 'Submit Test Result'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(TestInterface, \"nTOV5EcsnbJEhOjQdO7SUGC2/EY=\", false, function () {\n  return [useLocation, useNavigate, useAuth];\n});\n_c = TestInterface;\nexport default TestInterface;\nvar _c;\n$RefreshReg$(_c, \"TestInterface\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","Box","Button","Card","CardContent","CircularProgress","Divider","FormControl","FormControlLabel","Grid","IconButton","InputLabel","MenuItem","Paper","Radio","RadioGroup","Select","TextField","Typography","ContentCopy","CopyIcon","getPromptById","getPrompts","getModels","createTestResult","useAuth","jsxDEV","_jsxDEV","TestInterface","_s","location","navigate","currentUser","queryParams","URLSearchParams","search","promptIdFromUrl","get","loading","setLoading","submitting","setSubmitting","prompts","setPrompts","models","setModels","selectedPrompt","setSelectedPrompt","selectedPromptId","setSelectedPromptId","selectedModel","setSelectedModel","aiResponse","setAiResponse","success","setSuccess","successScore","setSuccessScore","notes","setNotes","error","setError","fetchData","promptsData","limit","modelsData","promptData","console","handlePromptChange","event","promptId","target","value","handleModelChange","handleCopyPrompt","navigator","clipboard","writeText","prompt_text","then","alert","catch","err","handleSubmit","preventDefault","resultData","prompt_id","model_name","model_provider","response","success_score","parseFloat","category","challenge_id","sx","display","justifyContent","mt","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","gutterBottom","elevation","p","mb","container","spacing","item","xs","md","fullWidth","id","labelId","label","onChange","map","prompt","technique","substring","model","alignItems","startIcon","onClick","position","color","className","whiteSpace","fontFamily","onSubmit","multiline","rows","e","placeholder","row","control","type","inputProps","min","max","step","size","disabled","_c","$RefreshReg$"],"sources":["/Users/davidortiz/Projects/Fixed_AI_Learning/ai_learning_platform/web/frontend/src/components/testing/TestInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  TextField,\n  Typography\n} from '@mui/material';\nimport { ContentCopy as CopyIcon } from '@mui/icons-material';\nimport { \n  getPromptById, \n  getPrompts, \n  getModels, \n  createTestResult \n} from '../../services/api';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst TestInterface = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const queryParams = new URLSearchParams(location.search);\n  const promptIdFromUrl = queryParams.get('promptId');\n\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [prompts, setPrompts] = useState([]);\n  const [models, setModels] = useState([]);\n  const [selectedPrompt, setSelectedPrompt] = useState(null);\n  const [selectedPromptId, setSelectedPromptId] = useState(promptIdFromUrl || '');\n  const [selectedModel, setSelectedModel] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [successScore, setSuccessScore] = useState(0.5);\n  const [notes, setNotes] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // Fetch prompts\n        const promptsData = await getPrompts({ limit: 100 });\n        setPrompts(promptsData);\n        \n        // Fetch models\n        const modelsData = await getModels();\n        setModels(modelsData);\n        \n        // If promptId is provided in URL, load that prompt\n        if (promptIdFromUrl) {\n          const promptData = await getPromptById(promptIdFromUrl);\n          setSelectedPrompt(promptData);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to load data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [promptIdFromUrl]);\n\n  const handlePromptChange = async (event) => {\n    const promptId = event.target.value;\n    setSelectedPromptId(promptId);\n    setError('');\n    \n    if (!promptId) {\n      setSelectedPrompt(null);\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      const promptData = await getPromptById(promptId);\n      setSelectedPrompt(promptData);\n    } catch (error) {\n      console.error('Error fetching prompt:', error);\n      setError('Failed to load prompt. Please try again.');\n      setSelectedPrompt(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleModelChange = (event) => {\n    setSelectedModel(event.target.value);\n  };\n\n  const handleCopyPrompt = () => {\n    if (!selectedPrompt) return;\n    \n    navigator.clipboard.writeText(selectedPrompt.prompt_text)\n      .then(() => {\n        alert('Prompt copied to clipboard!');\n      })\n      .catch(err => {\n        console.error('Failed to copy prompt:', err);\n        alert('Failed to copy prompt. Please try again.');\n      });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    if (!selectedPromptId) {\n      setError('Please select a prompt');\n      return;\n    }\n    \n    if (!selectedModel) {\n      setError('Please select an AI model');\n      return;\n    }\n    \n    if (!aiResponse) {\n      setError('Please enter the AI response');\n      return;\n    }\n    \n    try {\n      setSubmitting(true);\n      setError('');\n      \n      const resultData = {\n        prompt_id: selectedPromptId,\n        model_name: selectedModel,\n        model_provider: 'gray_swan_agent',\n        response: aiResponse,\n        success: success,\n        success_score: parseFloat(successScore),\n        notes: notes,\n        category: selectedPrompt?.category,\n        challenge_id: selectedPrompt?.challenge_id\n      };\n      \n      await createTestResult(resultData);\n      \n      // Reset form\n      setAiResponse('');\n      setSuccess(false);\n      setSuccessScore(0.5);\n      setNotes('');\n      \n      // Navigate to results page\n      navigate('/results');\n    } catch (error) {\n      console.error('Error submitting test result:', error);\n      setError('Failed to submit test result. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Manual Testing Interface\n      </Typography>\n      \n      <Paper elevation={2} sx={{ p: 3, mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Step 1: Select a Prompt and Model\n        </Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth error={!selectedPromptId && !!error}>\n              <InputLabel id=\"prompt-select-label\">Select Prompt</InputLabel>\n              <Select\n                labelId=\"prompt-select-label\"\n                id=\"prompt-select\"\n                value={selectedPromptId}\n                label=\"Select Prompt\"\n                onChange={handlePromptChange}\n              >\n                <MenuItem value=\"\">\n                  <em>Select a prompt</em>\n                </MenuItem>\n                {prompts.map((prompt) => (\n                  <MenuItem key={prompt.id} value={prompt.id}>\n                    {prompt.category} - {prompt.technique || 'N/A'} - {prompt.prompt_text.substring(0, 50)}...\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth error={!selectedModel && !!error}>\n              <InputLabel id=\"model-select-label\">Select AI Model</InputLabel>\n              <Select\n                labelId=\"model-select-label\"\n                id=\"model-select\"\n                value={selectedModel}\n                label=\"Select AI Model\"\n                onChange={handleModelChange}\n              >\n                <MenuItem value=\"\">\n                  <em>Select an AI model</em>\n                </MenuItem>\n                {models.map((model) => (\n                  <MenuItem key={model} value={model}>\n                    {model}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Paper>\n      \n      {selectedPrompt && (\n        <Paper elevation={2} sx={{ p: 3, mb: 4 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">\n              Step 2: Copy and Test the Prompt\n            </Typography>\n            <Button \n              variant=\"outlined\" \n              startIcon={<CopyIcon />}\n              onClick={handleCopyPrompt}\n            >\n              Copy Prompt\n            </Button>\n          </Box>\n          \n          <Card sx={{ mb: 3, position: 'relative' }}>\n            <CardContent>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Category: {selectedPrompt.category}\n                {selectedPrompt.technique && ` | Technique: ${selectedPrompt.technique}`}\n                {selectedPrompt.challenge_id && ` | Challenge: ${selectedPrompt.challenge_id}`}\n              </Typography>\n              \n              <Divider sx={{ mb: 2 }} />\n              \n              <Typography \n                variant=\"body2\" \n                component=\"pre\"\n                className=\"prompt-text\"\n                sx={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}\n              >\n                {selectedPrompt.prompt_text}\n              </Typography>\n            </CardContent>\n          </Card>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            1. Copy the prompt above\n            2. Paste it to the AI model ({selectedModel || \"selected model\"})\n            3. Get the response\n            4. Paste the response below\n          </Typography>\n        </Paper>\n      )}\n      \n      <Paper elevation={2} sx={{ p: 3, mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Step 3: Record the Response\n        </Typography>\n        \n        <Box component=\"form\" onSubmit={handleSubmit}>\n          <TextField\n            label=\"AI Response\"\n            multiline\n            rows={8}\n            fullWidth\n            value={aiResponse}\n            onChange={(e) => setAiResponse(e.target.value)}\n            placeholder=\"Paste the AI's response here...\"\n            sx={{ mb: 3 }}\n            error={!aiResponse && !!error}\n          />\n          \n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <FormControl component=\"fieldset\" sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Was the test successful?\n                </Typography>\n                <RadioGroup\n                  row\n                  value={success}\n                  onChange={(e) => setSuccess(e.target.value === 'true')}\n                >\n                  <FormControlLabel value={true} control={<Radio />} label=\"Success\" />\n                  <FormControlLabel value={false} control={<Radio />} label=\"Failure\" />\n                </RadioGroup>\n              </FormControl>\n              \n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Success Score (0-1)\n                </Typography>\n                <TextField\n                  type=\"number\"\n                  value={successScore}\n                  onChange={(e) => setSuccessScore(e.target.value)}\n                  inputProps={{ min: 0, max: 1, step: 0.1 }}\n                />\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"Notes\"\n                multiline\n                rows={5}\n                fullWidth\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Add any notes or observations about the test...\"\n              />\n            </Grid>\n          </Grid>\n          \n          {error && (\n            <Typography color=\"error\" sx={{ mt: 2 }}>\n              {error}\n            </Typography>\n          )}\n          \n          <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              size=\"large\"\n              disabled={submitting || !selectedPromptId || !selectedModel || !aiResponse}\n            >\n              {submitting ? 'Submitting...' : 'Submit Test Result'}\n            </Button>\n          </Box>\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default TestInterface;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SACEC,GAAG,EACHC,MAAM,EACNC,IAAI,EACJC,WAAW,EACXC,gBAAgB,EAChBC,OAAO,EACPC,WAAW,EACXC,gBAAgB,EAChBC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,KAAK,EACLC,KAAK,EACLC,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,UAAU,QACL,eAAe;AACtB,SAASC,WAAW,IAAIC,QAAQ,QAAQ,qBAAqB;AAC7D,SACEC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,gBAAgB,QACX,oBAAoB;AAC3B,SAASC,OAAO,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAG/B,WAAW,CAAC,CAAC;EAC9B,MAAMgC,QAAQ,GAAG/B,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEgC;EAAY,CAAC,GAAGP,OAAO,CAAC,CAAC;EACjC,MAAMQ,WAAW,GAAG,IAAIC,eAAe,CAACJ,QAAQ,CAACK,MAAM,CAAC;EACxD,MAAMC,eAAe,GAAGH,WAAW,CAACI,GAAG,CAAC,UAAU,CAAC;EAEnD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG1C,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC2C,UAAU,EAAEC,aAAa,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC6C,OAAO,EAAEC,UAAU,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC+C,MAAM,EAAEC,SAAS,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiD,cAAc,EAAEC,iBAAiB,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACmD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpD,QAAQ,CAACuC,eAAe,IAAI,EAAE,CAAC;EAC/E,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGtD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACuD,UAAU,EAAEC,aAAa,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACyD,OAAO,EAAEC,UAAU,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC2D,YAAY,EAAEC,eAAe,CAAC,GAAG5D,QAAQ,CAAC,GAAG,CAAC;EACrD,MAAM,CAAC6D,KAAK,EAAEC,QAAQ,CAAC,GAAG9D,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC+D,KAAK,EAAEC,QAAQ,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMgE,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFvB,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMwB,WAAW,GAAG,MAAMzC,UAAU,CAAC;UAAE0C,KAAK,EAAE;QAAI,CAAC,CAAC;QACpDrB,UAAU,CAACoB,WAAW,CAAC;;QAEvB;QACA,MAAME,UAAU,GAAG,MAAM1C,SAAS,CAAC,CAAC;QACpCsB,SAAS,CAACoB,UAAU,CAAC;;QAErB;QACA,IAAI7B,eAAe,EAAE;UACnB,MAAM8B,UAAU,GAAG,MAAM7C,aAAa,CAACe,eAAe,CAAC;UACvDW,iBAAiB,CAACmB,UAAU,CAAC;QAC/B;MACF,CAAC,CAAC,OAAON,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAAC,wCAAwC,CAAC;MACpD,CAAC,SAAS;QACRtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDuB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAC1B,eAAe,CAAC,CAAC;EAErB,MAAMgC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;IAC1C,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACnCvB,mBAAmB,CAACqB,QAAQ,CAAC;IAC7BT,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI,CAACS,QAAQ,EAAE;MACbvB,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACF;IAEA,IAAI;MACFR,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM2B,UAAU,GAAG,MAAM7C,aAAa,CAACiD,QAAQ,CAAC;MAChDvB,iBAAiB,CAACmB,UAAU,CAAC;IAC/B,CAAC,CAAC,OAAON,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAAC,0CAA0C,CAAC;MACpDd,iBAAiB,CAAC,IAAI,CAAC;IACzB,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkC,iBAAiB,GAAIJ,KAAK,IAAK;IACnClB,gBAAgB,CAACkB,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAAC5B,cAAc,EAAE;IAErB6B,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC/B,cAAc,CAACgC,WAAW,CAAC,CACtDC,IAAI,CAAC,MAAM;MACVC,KAAK,CAAC,6BAA6B,CAAC;IACtC,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACZf,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAEsB,GAAG,CAAC;MAC5CF,KAAK,CAAC,0CAA0C,CAAC;IACnD,CAAC,CAAC;EACN,CAAC;EAED,MAAMG,YAAY,GAAG,MAAOd,KAAK,IAAK;IACpCA,KAAK,CAACe,cAAc,CAAC,CAAC;IAEtB,IAAI,CAACpC,gBAAgB,EAAE;MACrBa,QAAQ,CAAC,wBAAwB,CAAC;MAClC;IACF;IAEA,IAAI,CAACX,aAAa,EAAE;MAClBW,QAAQ,CAAC,2BAA2B,CAAC;MACrC;IACF;IAEA,IAAI,CAACT,UAAU,EAAE;MACfS,QAAQ,CAAC,8BAA8B,CAAC;MACxC;IACF;IAEA,IAAI;MACFpB,aAAa,CAAC,IAAI,CAAC;MACnBoB,QAAQ,CAAC,EAAE,CAAC;MAEZ,MAAMwB,UAAU,GAAG;QACjBC,SAAS,EAAEtC,gBAAgB;QAC3BuC,UAAU,EAAErC,aAAa;QACzBsC,cAAc,EAAE,iBAAiB;QACjCC,QAAQ,EAAErC,UAAU;QACpBE,OAAO,EAAEA,OAAO;QAChBoC,aAAa,EAAEC,UAAU,CAACnC,YAAY,CAAC;QACvCE,KAAK,EAAEA,KAAK;QACZkC,QAAQ,EAAE9C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE8C,QAAQ;QAClCC,YAAY,EAAE/C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE+C;MAChC,CAAC;MAED,MAAMrE,gBAAgB,CAAC6D,UAAU,CAAC;;MAElC;MACAhC,aAAa,CAAC,EAAE,CAAC;MACjBE,UAAU,CAAC,KAAK,CAAC;MACjBE,eAAe,CAAC,GAAG,CAAC;MACpBE,QAAQ,CAAC,EAAE,CAAC;;MAEZ;MACA5B,QAAQ,CAAC,UAAU,CAAC;IACtB,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDC,QAAQ,CAAC,iDAAiD,CAAC;IAC7D,CAAC,SAAS;MACRpB,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,IAAIH,OAAO,EAAE;IACX,oBACEX,OAAA,CAAC1B,GAAG;MAAC6F,EAAE,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,QAAQ;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAC,QAAA,eAC5DvE,OAAA,CAACtB,gBAAgB;QAAA8F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEV;EAEA,oBACE3E,OAAA,CAAC1B,GAAG;IAAAiG,QAAA,gBACFvE,OAAA,CAACT,UAAU;MAACqF,OAAO,EAAC,IAAI;MAACC,SAAS,EAAC,IAAI;MAACC,YAAY;MAAAP,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEb3E,OAAA,CAACd,KAAK;MAAC6F,SAAS,EAAE,CAAE;MAACZ,EAAE,EAAE;QAAEa,CAAC,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAV,QAAA,gBACvCvE,OAAA,CAACT,UAAU;QAACqF,OAAO,EAAC,IAAI;QAACE,YAAY;QAAAP,QAAA,EAAC;MAEtC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEb3E,OAAA,CAAClB,IAAI;QAACoG,SAAS;QAACC,OAAO,EAAE,CAAE;QAAAZ,QAAA,gBACzBvE,OAAA,CAAClB,IAAI;UAACsG,IAAI;UAACC,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAAAf,QAAA,eACvBvE,OAAA,CAACpB,WAAW;YAAC2G,SAAS;YAACtD,KAAK,EAAE,CAACZ,gBAAgB,IAAI,CAAC,CAACY,KAAM;YAAAsC,QAAA,gBACzDvE,OAAA,CAAChB,UAAU;cAACwG,EAAE,EAAC,qBAAqB;cAAAjB,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAC/D3E,OAAA,CAACX,MAAM;cACLoG,OAAO,EAAC,qBAAqB;cAC7BD,EAAE,EAAC,eAAe;cAClB3C,KAAK,EAAExB,gBAAiB;cACxBqE,KAAK,EAAC,eAAe;cACrBC,QAAQ,EAAElD,kBAAmB;cAAA8B,QAAA,gBAE7BvE,OAAA,CAACf,QAAQ;gBAAC4D,KAAK,EAAC,EAAE;gBAAA0B,QAAA,eAChBvE,OAAA;kBAAAuE,QAAA,EAAI;gBAAe;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChB,CAAC,EACV5D,OAAO,CAAC6E,GAAG,CAAEC,MAAM,iBAClB7F,OAAA,CAACf,QAAQ;gBAAiB4D,KAAK,EAAEgD,MAAM,CAACL,EAAG;gBAAAjB,QAAA,GACxCsB,MAAM,CAAC5B,QAAQ,EAAC,KAAG,EAAC4B,MAAM,CAACC,SAAS,IAAI,KAAK,EAAC,KAAG,EAACD,MAAM,CAAC1C,WAAW,CAAC4C,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC,KACzF;cAAA,GAFeF,MAAM,CAACL,EAAE;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEd,CACX,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC,eAEP3E,OAAA,CAAClB,IAAI;UAACsG,IAAI;UAACC,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAAAf,QAAA,eACvBvE,OAAA,CAACpB,WAAW;YAAC2G,SAAS;YAACtD,KAAK,EAAE,CAACV,aAAa,IAAI,CAAC,CAACU,KAAM;YAAAsC,QAAA,gBACtDvE,OAAA,CAAChB,UAAU;cAACwG,EAAE,EAAC,oBAAoB;cAAAjB,QAAA,EAAC;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAChE3E,OAAA,CAACX,MAAM;cACLoG,OAAO,EAAC,oBAAoB;cAC5BD,EAAE,EAAC,cAAc;cACjB3C,KAAK,EAAEtB,aAAc;cACrBmE,KAAK,EAAC,iBAAiB;cACvBC,QAAQ,EAAE7C,iBAAkB;cAAAyB,QAAA,gBAE5BvE,OAAA,CAACf,QAAQ;gBAAC4D,KAAK,EAAC,EAAE;gBAAA0B,QAAA,eAChBvE,OAAA;kBAAAuE,QAAA,EAAI;gBAAkB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnB,CAAC,EACV1D,MAAM,CAAC2E,GAAG,CAAEI,KAAK,iBAChBhG,OAAA,CAACf,QAAQ;gBAAa4D,KAAK,EAAEmD,KAAM;gBAAAzB,QAAA,EAChCyB;cAAK,GADOA,KAAK;gBAAAxB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACX,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EAEPxD,cAAc,iBACbnB,OAAA,CAACd,KAAK;MAAC6F,SAAS,EAAE,CAAE;MAACZ,EAAE,EAAE;QAAEa,CAAC,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAV,QAAA,gBACvCvE,OAAA,CAAC1B,GAAG;QAAC6F,EAAE,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,eAAe;UAAE4B,UAAU,EAAE,QAAQ;UAAEhB,EAAE,EAAE;QAAE,CAAE;QAAAV,QAAA,gBACzFvE,OAAA,CAACT,UAAU;UAACqF,OAAO,EAAC,IAAI;UAAAL,QAAA,EAAC;QAEzB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb3E,OAAA,CAACzB,MAAM;UACLqG,OAAO,EAAC,UAAU;UAClBsB,SAAS,eAAElG,OAAA,CAACP,QAAQ;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UACxBwB,OAAO,EAAEpD,gBAAiB;UAAAwB,QAAA,EAC3B;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAEN3E,OAAA,CAACxB,IAAI;QAAC2F,EAAE,EAAE;UAAEc,EAAE,EAAE,CAAC;UAAEmB,QAAQ,EAAE;QAAW,CAAE;QAAA7B,QAAA,eACxCvE,OAAA,CAACvB,WAAW;UAAA8F,QAAA,gBACVvE,OAAA,CAACT,UAAU;YAACqF,OAAO,EAAC,WAAW;YAACyB,KAAK,EAAC,gBAAgB;YAACvB,YAAY;YAAAP,QAAA,GAAC,YACxD,EAACpD,cAAc,CAAC8C,QAAQ,EACjC9C,cAAc,CAAC2E,SAAS,IAAI,iBAAiB3E,cAAc,CAAC2E,SAAS,EAAE,EACvE3E,cAAc,CAAC+C,YAAY,IAAI,iBAAiB/C,cAAc,CAAC+C,YAAY,EAAE;UAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE,CAAC,eAEb3E,OAAA,CAACrB,OAAO;YAACwF,EAAE,EAAE;cAAEc,EAAE,EAAE;YAAE;UAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAE1B3E,OAAA,CAACT,UAAU;YACTqF,OAAO,EAAC,OAAO;YACfC,SAAS,EAAC,KAAK;YACfyB,SAAS,EAAC,aAAa;YACvBnC,EAAE,EAAE;cAAEoC,UAAU,EAAE,UAAU;cAAEC,UAAU,EAAE;YAAY,CAAE;YAAAjC,QAAA,EAEvDpD,cAAc,CAACgC;UAAW;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAEP3E,OAAA,CAACT,UAAU;QAACqF,OAAO,EAAC,OAAO;QAACyB,KAAK,EAAC,gBAAgB;QAAClC,EAAE,EAAE;UAAEc,EAAE,EAAE;QAAE,CAAE;QAAAV,QAAA,GAAC,wDAEnC,EAAChD,aAAa,IAAI,gBAAgB,EAAC,mDAGlE;MAAA;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR,eAED3E,OAAA,CAACd,KAAK;MAAC6F,SAAS,EAAE,CAAE;MAACZ,EAAE,EAAE;QAAEa,CAAC,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAV,QAAA,gBACvCvE,OAAA,CAACT,UAAU;QAACqF,OAAO,EAAC,IAAI;QAACE,YAAY;QAAAP,QAAA,EAAC;MAEtC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEb3E,OAAA,CAAC1B,GAAG;QAACuG,SAAS,EAAC,MAAM;QAAC4B,QAAQ,EAAEjD,YAAa;QAAAe,QAAA,gBAC3CvE,OAAA,CAACV,SAAS;UACRoG,KAAK,EAAC,aAAa;UACnBgB,SAAS;UACTC,IAAI,EAAE,CAAE;UACRpB,SAAS;UACT1C,KAAK,EAAEpB,UAAW;UAClBkE,QAAQ,EAAGiB,CAAC,IAAKlF,aAAa,CAACkF,CAAC,CAAChE,MAAM,CAACC,KAAK,CAAE;UAC/CgE,WAAW,EAAC,iCAAiC;UAC7C1C,EAAE,EAAE;YAAEc,EAAE,EAAE;UAAE,CAAE;UACdhD,KAAK,EAAE,CAACR,UAAU,IAAI,CAAC,CAACQ;QAAM;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eAEF3E,OAAA,CAAClB,IAAI;UAACoG,SAAS;UAACC,OAAO,EAAE,CAAE;UAAAZ,QAAA,gBACzBvE,OAAA,CAAClB,IAAI;YAACsG,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAAf,QAAA,gBACvBvE,OAAA,CAACpB,WAAW;cAACiG,SAAS,EAAC,UAAU;cAACV,EAAE,EAAE;gBAAEc,EAAE,EAAE;cAAE,CAAE;cAAAV,QAAA,gBAC9CvE,OAAA,CAACT,UAAU;gBAACqF,OAAO,EAAC,WAAW;gBAACE,YAAY;gBAAAP,QAAA,EAAC;cAE7C;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACb3E,OAAA,CAACZ,UAAU;gBACT0H,GAAG;gBACHjE,KAAK,EAAElB,OAAQ;gBACfgE,QAAQ,EAAGiB,CAAC,IAAKhF,UAAU,CAACgF,CAAC,CAAChE,MAAM,CAACC,KAAK,KAAK,MAAM,CAAE;gBAAA0B,QAAA,gBAEvDvE,OAAA,CAACnB,gBAAgB;kBAACgE,KAAK,EAAE,IAAK;kBAACkE,OAAO,eAAE/G,OAAA,CAACb,KAAK;oBAAAqF,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAE;kBAACe,KAAK,EAAC;gBAAS;kBAAAlB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,eACrE3E,OAAA,CAACnB,gBAAgB;kBAACgE,KAAK,EAAE,KAAM;kBAACkE,OAAO,eAAE/G,OAAA,CAACb,KAAK;oBAAAqF,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAE;kBAACe,KAAK,EAAC;gBAAS;kBAAAlB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5D,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,eAEd3E,OAAA,CAACpB,WAAW;cAAC2G,SAAS;cAACpB,EAAE,EAAE;gBAAEc,EAAE,EAAE;cAAE,CAAE;cAAAV,QAAA,gBACnCvE,OAAA,CAACT,UAAU;gBAACqF,OAAO,EAAC,WAAW;gBAACE,YAAY;gBAAAP,QAAA,EAAC;cAE7C;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACb3E,OAAA,CAACV,SAAS;gBACR0H,IAAI,EAAC,QAAQ;gBACbnE,KAAK,EAAEhB,YAAa;gBACpB8D,QAAQ,EAAGiB,CAAC,IAAK9E,eAAe,CAAC8E,CAAC,CAAChE,MAAM,CAACC,KAAK,CAAE;gBACjDoE,UAAU,EAAE;kBAAEC,GAAG,EAAE,CAAC;kBAAEC,GAAG,EAAE,CAAC;kBAAEC,IAAI,EAAE;gBAAI;cAAE;gBAAA5C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3C,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACS,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC,eAEP3E,OAAA,CAAClB,IAAI;YAACsG,IAAI;YAACC,EAAE,EAAE,EAAG;YAACC,EAAE,EAAE,CAAE;YAAAf,QAAA,eACvBvE,OAAA,CAACV,SAAS;cACRoG,KAAK,EAAC,OAAO;cACbgB,SAAS;cACTC,IAAI,EAAE,CAAE;cACRpB,SAAS;cACT1C,KAAK,EAAEd,KAAM;cACb4D,QAAQ,EAAGiB,CAAC,IAAK5E,QAAQ,CAAC4E,CAAC,CAAChE,MAAM,CAACC,KAAK,CAAE;cAC1CgE,WAAW,EAAC;YAAiD;cAAArC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9D;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,EAEN1C,KAAK,iBACJjC,OAAA,CAACT,UAAU;UAAC8G,KAAK,EAAC,OAAO;UAAClC,EAAE,EAAE;YAAEG,EAAE,EAAE;UAAE,CAAE;UAAAC,QAAA,EACrCtC;QAAK;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CACb,eAED3E,OAAA,CAAC1B,GAAG;UAAC6F,EAAE,EAAE;YAAEG,EAAE,EAAE,CAAC;YAAEF,OAAO,EAAE,MAAM;YAAEC,cAAc,EAAE;UAAS,CAAE;UAAAE,QAAA,eAC5DvE,OAAA,CAACzB,MAAM;YACLyI,IAAI,EAAC,QAAQ;YACbpC,OAAO,EAAC,WAAW;YACnByC,IAAI,EAAC,OAAO;YACZC,QAAQ,EAAEzG,UAAU,IAAI,CAACQ,gBAAgB,IAAI,CAACE,aAAa,IAAI,CAACE,UAAW;YAAA8C,QAAA,EAE1E1D,UAAU,GAAG,eAAe,GAAG;UAAoB;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACzE,EAAA,CA5UID,aAAa;EAAA,QACA7B,WAAW,EACXC,WAAW,EACJyB,OAAO;AAAA;AAAAyH,EAAA,GAH3BtH,aAAa;AA8UnB,eAAeA,aAAa;AAAC,IAAAsH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}